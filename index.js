import { Client, GatewayIntentBits, REST, Routes, SlashCommandBuilder } from "discord.js";
import fs from "fs";
import express from "express";
import { Octokit } from "@octokit/rest";

// === –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
const app = express();
app.get("/", (req, res) => res.send("Bot is running!"));
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`üåê Web server is online on port ${PORT}`));

// === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
const TOKEN = process.env.DISCORD_BOT_TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const GUILD_ID = process.env.GUILD_ID;
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const GITHUB_REPO = process.env.GITHUB_REPO || "hundetigern/realname-bot"; // <-- —Ç–≤–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

if (!TOKEN || !CLIENT_ID || !GUILD_ID || !GITHUB_TOKEN) {
  console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è");
  process.exit(1);
}

// === GitHub –∫–ª–∏–µ–Ω—Ç ===
const octokit = new Octokit({ auth: GITHUB_TOKEN });
const [owner, repo] = GITHUB_REPO.split("/");

// === –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º ===
const dataFile = "./data/names.json";
let names = {};

if (fs.existsSync(dataFile)) {
  try {
    names = JSON.parse(fs.readFileSync(dataFile, "utf8"));
  } catch {
    names = {};
  }
} else {
  fs.mkdirSync("./data", { recursive: true });
  fs.writeFileSync(dataFile, "{}");
}

// === Discord –∫–ª–∏–µ–Ω—Ç ===
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages
  ],
});

// === –ö–æ–º–∞–Ω–¥—ã ===
const commands = [
  new SlashCommandBuilder()
    .setName("setrealname")
    .setDescription("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Å–µ–±—è –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ VIP)")
    .addStringOption(option =>
      option.setName("name").setDescription("–†–µ–∞–ª—å–Ω–æ–µ –∏–º—è").setRequired(true)
    )
    .addUserOption(option =>
      option.setName("target").setDescription("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)").setRequired(false)
    ),
  new SlashCommandBuilder()
    .setName("removerealname")
    .setDescription("–£–¥–∞–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
  new SlashCommandBuilder()
    .setName("ping")
    .setDescription("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∂–∏–≤ –ª–∏ –±–æ—Ç"),
];

const rest = new REST({ version: "10" }).setToken(TOKEN);

// === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ ===
(async () => {
  try {
    console.log("‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—ã...");
    await rest.put(Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID), { body: commands });
    console.log("‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:", err);
  }
})();

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ===
client.on("interactionCreate", async interaction => {
  if (!interaction.isChatInputCommand()) return;

  const { commandName } = interaction;

  if (commandName === "ping") {
    return interaction.reply({
      content: "üèì –ü–æ–Ω–≥! –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ ‚Äî –±–æ—Ç –∂–∏–≤, –±–æ–¥—Ä, –∏ –≥–æ—Ç–æ–≤ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üòé",
      ephemeral: true
    });
  }

  if (commandName === "setrealname") {
    const name = interaction.options.getString("name");
    const target = interaction.options.getUser("target") || interaction.user;

    if (target.id !== interaction.user.id) {
      const member = await interaction.guild.members.fetch(interaction.user.id);
      if (!member.roles.cache.some(r => r.name === "ü§¥VIPüë∏")) {
        return interaction.reply({
          content: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –∏–∑–º–µ–Ω—è—Ç—å –∏–º—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!",
          ephemeral: true
        });
      }
    }

    names[target.id] = name;
    fs.writeFileSync(dataFile, JSON.stringify(names, null, 2));

    const memberTarget = await interaction.guild.members.fetch(target.id);
    const baseNick = memberTarget.displayName.split(" | ")[0];
    const shortBase = baseNick.slice(0, 25 - name.length); // —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç
    const newNick = `${shortBase} | ${name}`;

    try {
      await memberTarget.setNickname(newNick);
      await interaction.reply({
        content: `‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è ${target.username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **${name}**`,
        ephemeral: true
      });
      await updateGitHubFile();
    } catch (err) {
      console.error(err);
      await interaction.reply({
        content: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.",
        ephemeral: true
      });
    }
  }

  if (commandName === "removerealname") {
    const userId = interaction.user.id;
    if (!names[userId]) {
      return interaction.reply({
        content: "‚ùå –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
        ephemeral: true
      });
    }

    delete names[userId];
    fs.writeFileSync(dataFile, JSON.stringify(names, null, 2));

    const member = await interaction.guild.members.fetch(userId);
    const baseNick = member.displayName.split(" | ")[0];

    try {
      await member.setNickname(baseNick);
      await interaction.reply({
        content: "‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è —É–¥–∞–ª–µ–Ω–æ.",
        ephemeral: true
      });
      await updateGitHubFile();
    } catch (err) {
      console.error(err);
      await interaction.reply({
        content: "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫, –Ω–æ –∏–º—è —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã.",
        ephemeral: true
      });
    }
  }
});

// === –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–æ–≤ ===
client.on("guildMemberUpdate", async (oldMember, newMember) => {
  const id = newMember.id;
  if (!names[id]) return;

  const realName = names[id];
  const baseNick = newMember.displayName.split(" | ")[0];
  const shortBase = baseNick.slice(0, 25 - realName.length);
  const expected = `${shortBase} | ${realName}`;

  if (newMember.nickname !== expected) {
    try {
      await newMember.setNickname(expected);
      console.log(`üîÅ –ù–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è ${newMember.user.username}`);
    } catch {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫ –¥–ª—è ${newMember.user.username}`);
    }
  }
});

// === –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Å–µ–π–≤–∞ –Ω–∞ GitHub ===
async function updateGitHubFile() {
  try {
    const content = fs.readFileSync(dataFile, "utf8");
    const { data: file } = await octokit.repos.getContent({ owner, repo, path: "data/names.json" });

    await octokit.repos.createOrUpdateFileContents({
      owner,
      repo,
      path: "data/names.json",
      message: "–ê–≤—Ç–æ—Å–µ–π–≤: –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞",
      content: Buffer.from(content).toString("base64"),
      sha: file.sha
    });

    console.log("‚úÖ names.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ GitHub");
  } catch (err) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ names.json:", err.message);
  }
}

// === –ê–≤—Ç–æ—Å–µ–π–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç ===
setInterval(updateGitHubFile, 5 * 60 * 1000);

// === –ó–∞–ø—É—Å–∫ ===
client.once("ready", () => {
  console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);
});

client.login(TOKEN);
