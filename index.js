import { Client, GatewayIntentBits, REST, Routes, SlashCommandBuilder } from "discord.js";
import fs from "fs";
import express from "express";
import { Octokit } from "@octokit/rest";

// === –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render / Replit ===
const app = express();
app.get("/", (req, res) => res.send("Bot is running!"));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Web server is online on port ${PORT}`));

// === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
const TOKEN = process.env.DISCORD_BOT_TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const GUILD_ID = process.env.GUILD_ID;
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const GITHUB_REPO = "hundetigern/realname-bot";
const GITHUB_FILE_PATH = "data/names.json";

if (!TOKEN || !CLIENT_ID || !GUILD_ID || !GITHUB_TOKEN) {
  console.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã DISCORD_BOT_TOKEN, CLIENT_ID, GUILD_ID –∏–ª–∏ GITHUB_TOKEN");
  process.exit(1);
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ===
const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMembers, GatewayIntentBits.GuildMessages],
});

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GitHub ===
const octokit = new Octokit({ auth: GITHUB_TOKEN });

// === –†–∞–±–æ—Ç–∞ —Å names.json ===
const dataFile = "./data/names.json";
let names = fs.existsSync(dataFile)
  ? JSON.parse(fs.readFileSync(dataFile, "utf8"))
  : {};

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ names.json –Ω–∞ GitHub —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ ===
async function saveNamesToGitHub(retry = 0) {
  try {
    fs.writeFileSync(dataFile, JSON.stringify(names, null, 2));

    const { data: fileData } = await octokit.repos.getContent({
      owner: GITHUB_REPO.split("/")[0],
      repo: GITHUB_REPO.split("/")[1],
      path: GITHUB_FILE_PATH,
    });

    await octokit.repos.createOrUpdateFileContents({
      owner: GITHUB_REPO.split("/")[0],
      repo: GITHUB_REPO.split("/")[1],
      path: GITHUB_FILE_PATH,
      message: "–ê–≤—Ç–æ—Å–µ–π–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–º—ë–Ω",
      content: Buffer.from(JSON.stringify(names, null, 2)).toString("base64"),
      sha: fileData.sha,
    });

    console.log("‚úÖ names.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ GitHub");
  } catch (err) {
    if (err.status === 409 && retry < 3) {
      console.warn("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç SHA –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫...");
      setTimeout(() => saveNamesToGitHub(retry + 1), 10000);
    } else if (err.status === 404) {
      await octokit.repos.createOrUpdateFileContents({
        owner: GITHUB_REPO.split("/")[0],
        repo: GITHUB_REPO.split("/")[1],
        path: GITHUB_FILE_PATH,
        message: "–°–æ–∑–¥–∞–Ω names.json",
        content: Buffer.from(JSON.stringify(names, null, 2)).toString("base64"),
      });
      console.log("‚úÖ names.json —Å–æ–∑–¥–∞–Ω –Ω–∞ GitHub");
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ names.json –Ω–∞ GitHub:", err.message);
    }
  }
}

// === –ê–≤—Ç–æ—Å–µ–π–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç ===
setInterval(saveNamesToGitHub, 10 * 60 * 1000);

// === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ ===
const commands = [
  new SlashCommandBuilder()
    .setName("setrealname")
    .setDescription("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Å–µ–±—è –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ VIP)")
    .addStringOption(o => o.setName("name").setDescription("–†–µ–∞–ª—å–Ω–æ–µ –∏–º—è").setRequired(true))
    .addUserOption(o => o.setName("target").setDescription("–ö–æ–º—É –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è").setRequired(false)),
  new SlashCommandBuilder()
    .setName("removerealname")
    .setDescription("–£–¥–∞–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    .addUserOption(o => o.setName("target").setDescription("–ö–æ–≥–æ —É–¥–∞–ª–∏—Ç—å").setRequired(false)),
  new SlashCommandBuilder()
    .setName("ping")
    .setDescription("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"),
].map(c => c.toJSON());

const rest = new REST({ version: "10" }).setToken(TOKEN);
(async () => {
  try {
    console.log("‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—ã...");
    await rest.put(Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID), { body: commands });
    console.log("‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:", err);
  }
})();

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ===
client.on("interactionCreate", async interaction => {
  if (!interaction.isChatInputCommand()) return;

  try {
    const target = interaction.options.getUser("target") || interaction.user;

    if (interaction.commandName === "setrealname") {
      const name = interaction.options.getString("name");
      const member = await interaction.guild.members.fetch(interaction.user.id);

      if (target.id !== interaction.user.id && !member.roles.cache.some(r => r.name === "ü§¥VIPüë∏")) {
        return await interaction.reply({ content: "‚ùå –ù–µ—Ç –ø—Ä–∞–≤–∞ –∏–∑–º–µ–Ω—è—Ç—å —á—É–∂–∏–µ –∏–º–µ–Ω–∞!", flags: 64 });
      }

      const MAX_NICK_LENGTH = 32;
      const memberTarget = await interaction.guild.members.fetch(target.id);
      const baseNick = memberTarget.displayName.split(" | ")[0];
      const extraLength = 3 + name.length;
      const baseNickTrimmed = baseNick.length + extraLength > MAX_NICK_LENGTH
        ? baseNick.substring(0, MAX_NICK_LENGTH - extraLength)
        : baseNick;
      const newNick = `${baseNickTrimmed} | ${name}`;

      names[target.id] = name;
      fs.writeFileSync(dataFile, JSON.stringify(names, null, 2));

      try {
        await memberTarget.setNickname(newNick);
        await interaction.reply({ content: `‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è ${target.username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **${name}**`, flags: 64 });
      } catch {
        await interaction.reply({ content: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.", flags: 64 });
      }
    }

    if (interaction.commandName === "removerealname") {
      if (!names[target.id])
        return await interaction.reply({ content: "‚ùå –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", flags: 64 });

      const memberTarget = await interaction.guild.members.fetch(target.id);
      const baseNick = memberTarget.displayName.split(" | ")[0];
      delete names[target.id];
      fs.writeFileSync(dataFile, JSON.stringify(names, null, 2));

      try {
        await memberTarget.setNickname(baseNick);
        await interaction.reply({ content: `‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è ${target.username} —É–¥–∞–ª–µ–Ω–æ`, flags: 64 });
      } catch {
        await interaction.reply({ content: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.", flags: 64 });
      }
    }

    if (interaction.commandName === "ping") {
      await interaction.reply({ content: "üèì –ü–æ–Ω–≥! –ë–æ—Ç –∂–∏–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç üòé", flags: 64 });
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã:", err);
  }
});

// === –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π —Å–º–µ–Ω–µ ===
client.on("guildMemberUpdate", async (oldMember, newMember) => {
  const id = newMember.id;
  if (!names[id]) return;

  const realName = names[id];
  const baseNick = newMember.displayName.split(" | ")[0];
  const MAX_NICK_LENGTH = 32;
  const extraLength = 3 + realName.length;
  const baseNickTrimmed = baseNick.length + extraLength > MAX_NICK_LENGTH
    ? baseNick.substring(0, MAX_NICK_LENGTH - extraLength)
    : baseNick;
  const expected = `${baseNickTrimmed} | ${realName}`;

  if (newMember.nickname !== expected) {
    try {
      await newMember.setNickname(expected);
    } catch {}
  }
});

// === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
client.once("ready", () => console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`));
client.login(TOKEN);
