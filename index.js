import { Client, GatewayIntentBits, REST, Routes, SlashCommandBuilder } from "discord.js";
import fs from "fs";
import express from "express";
import { Octokit } from "@octokit/rest";

// === –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render / Replit ===
const app = express();
app.get("/", (req, res) => res.send("Bot is running!"));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Web server is online on port ${PORT}`));

// === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
const TOKEN = process.env.DISCORD_BOT_TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const GUILD_ID = process.env.GUILD_ID;
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const GITHUB_REPO = "hundetigern/realname-bot"; // <- —Ç–≤–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∫–æ–¥–æ–º
const GITHUB_FILE_PATH = "data/names.json"; // –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ GitHub

if (!TOKEN || !CLIENT_ID || !GUILD_ID || !GITHUB_TOKEN) {
  console.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã DISCORD_BOT_TOKEN, CLIENT_ID, GUILD_ID –∏–ª–∏ GITHUB_TOKEN");
  process.exit(1);
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ===
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
  ],
});

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GitHub ===
const octokit = new Octokit({ auth: GITHUB_TOKEN });

// === –†–∞–±–æ—Ç–∞ —Å names.json ===
const dataFile = "./data/names.json";
let names = fs.existsSync(dataFile)
  ? JSON.parse(fs.readFileSync(dataFile, "utf8"))
  : {};

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ names.json –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–∞ GitHub ===
async function saveNamesToGitHub() {
  try {
    fs.writeFileSync(dataFile, JSON.stringify(names, null, 2));

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é SHA —Ñ–∞–π–ª–∞ –Ω–∞ GitHub
    const { data: fileData } = await octokit.repos.getContent({
      owner: GITHUB_REPO.split("/")[0],
      repo: GITHUB_REPO.split("/")[1],
      path: GITHUB_FILE_PATH,
    });

    await octokit.repos.createOrUpdateFileContents({
      owner: GITHUB_REPO.split("/")[0],
      repo: GITHUB_REPO.split("/")[1],
      path: GITHUB_FILE_PATH,
      message: "–ê–≤—Ç–æ—Å–µ–π–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–º—ë–Ω",
      content: Buffer.from(JSON.stringify(names, null, 2)).toString("base64"),
      sha: fileData.sha,
    });

    console.log("‚úÖ names.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ GitHub");
  } catch (err) {
    if (err.status === 404) {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–µ–∑ SHA
      await octokit.repos.createOrUpdateFileContents({
        owner: GITHUB_REPO.split("/")[0],
        repo: GITHUB_REPO.split("/")[1],
        path: GITHUB_FILE_PATH,
        message: "–°–æ–∑–¥–∞–Ω names.json",
        content: Buffer.from(JSON.stringify(names, null, 2)).toString("base64"),
      });
      console.log("‚úÖ names.json —Å–æ–∑–¥–∞–Ω –Ω–∞ GitHub");
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ names.json –Ω–∞ GitHub:", err);
    }
  }
}

// === –ê–≤—Ç–æ—Å–µ–π–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç ===
setInterval(saveNamesToGitHub, 10 * 60 * 1000);

// === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ /setrealname, /removerealname, /ping ===
const commands = [
  new SlashCommandBuilder()
    .setName("setrealname")
    .setDescription("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Å–µ–±—è –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ VIP)")
    .addStringOption(option => option.setName("name").setDescription("–†–µ–∞–ª—å–Ω–æ–µ –∏–º—è").setRequired(true))
    .addUserOption(option => option.setName("target").setDescription("–ö–æ–º—É –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è").setRequired(false)),

  new SlashCommandBuilder()
    .setName("removerealname")
    .setDescription("–£–¥–∞–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    .addUserOption(option => option.setName("target").setDescription("–ö–æ–≥–æ —É–¥–∞–ª–∏—Ç—å").setRequired(false)),

  new SlashCommandBuilder()
    .setName("ping")
    .setDescription("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"),
].map(c => c.toJSON());

const rest = new REST({ version: "10" }).setToken(TOKEN);
(async () => {
  try {
    console.log("‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—ã...");
    await rest.put(Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID), { body: commands });
    console.log("‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:", err);
  }
})();

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ===
client.on("interactionCreate", async interaction => {
  if (!interaction.isChatInputCommand()) return;

  const target = interaction.options.getUser("target") || interaction.user;

  if (interaction.commandName === "setrealname") {
    const name = interaction.options.getString("name");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ VIP
    if (target.id !== interaction.user.id) {
      const member = await interaction.guild.members.fetch(interaction.user.id);
      if (!member.roles.cache.some(r => r.name === "ü§¥VIPüë∏")) {
        return interaction.reply({ content: "‚ùå –ù–µ—Ç –ø—Ä–∞–≤–∞ –∏–∑–º–µ–Ω—è—Ç—å —á—É–∂–∏–µ –∏–º–µ–Ω–∞!", ephemeral: true }).catch(()=>{});
      }
    }

    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–∞
    const MAX_NICK_LENGTH = 32;
    const memberTarget = await interaction.guild.members.fetch(target.id);
    const baseNick = memberTarget.displayName.split(" | ")[0];
    const extraLength = 3 + name.length; // " | " + –∏–º—è
    const baseNickTrimmed = (baseNick.length + extraLength > MAX_NICK_LENGTH) ? baseNick.substring(0, MAX_NICK_LENGTH - extraLength) : baseNick;
    const newNick = `${baseNickTrimmed} | ${name}`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º
    names[target.id] = name;
    fs.writeFileSync(dataFile, JSON.stringify(names, null, 2));

    try {
      await memberTarget.setNickname(newNick);
      await interaction.reply({ content: `‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è ${target.username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **${name}**`, ephemeral: true });
    } catch {
      await interaction.reply({ content: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.", ephemeral: true });
    }
  }

  if (interaction.commandName === "removerealname") {
    if (!names[target.id]) return interaction.reply({ content: "‚ùå –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", ephemeral: true });

    const memberTarget = await interaction.guild.members.fetch(target.id);
    const baseNick = memberTarget.displayName.split(" | ")[0];

    delete names[target.id];
    fs.writeFileSync(dataFile, JSON.stringify(names, null, 2));

    try {
      await memberTarget.setNickname(baseNick);
      await interaction.reply({ content: `‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è ${target.username} —É–¥–∞–ª–µ–Ω–æ`, ephemeral: true });
    } catch {
      await interaction.reply({ content: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.", ephemeral: true });
    }
  }

  if (interaction.commandName === "ping") {
    await interaction.reply({ content: "üèì –ü–æ–Ω–≥! –ë–æ—Ç –∂–∏–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç üòé", ephemeral: true });
  }
});

// === –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π —Å–º–µ–Ω–µ ===
client.on("guildMemberUpdate", async (oldMember, newMember) => {
  const id = newMember.id;
  if (!names[id]) return;

  const realName = names[id];
  const baseNick = newMember.displayName.split(" | ")[0];
  const MAX_NICK_LENGTH = 32;
  const extraLength = 3 + realName.length;
  const baseNickTrimmed = (baseNick.length + extraLength > MAX_NICK_LENGTH) ? baseNick.substring(0, MAX_NICK_LENGTH - extraLength) : baseNick;
  const expected = `${baseNickTrimmed} | ${realName}`;

  if (newMember.nickname !== expected) {
    try { await newMember.setNickname(expected); } catch {}
  }
});

// === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
client.once("clientReady", () => console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`));
client.login(TOKEN);
